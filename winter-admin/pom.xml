<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>winter</artifactId>
        <groupId>com.winter</groupId>
        <version>1.1.5</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>
    <artifactId>winter-admin</artifactId>

    <description>
        web服务入口
    </description>

    <dependencies>

        <!-- spring-boot-devtools -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional> <!-- 表示依赖不会传递 -->
        </dependency>

        <!-- swagger3-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
        </dependency>

        <!-- 防止进入swagger页面报类型转换错误，排除3.0.0中的引用，手动增加1.6.2版本 -->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-models</artifactId>
            <version>1.6.2</version>
        </dependency>

        <!-- Mysql驱动包 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- 核心模块-->
        <dependency>
            <groupId>com.winter</groupId>
            <artifactId>winter-framework</artifactId>
        </dependency>

        <!-- 定时任务-->
<!--        <dependency>-->
<!--            <groupId>com.winter</groupId>-->
<!--            <artifactId>winter-quartz</artifactId>-->
<!--        </dependency>-->

        <!-- 代码生成-->
        <dependency>
            <groupId>com.winter</groupId>
            <artifactId>winter-generator</artifactId>
        </dependency>

        <dependency>
            <groupId>com.winter</groupId>
            <artifactId>winter-swagger</artifactId>
            <version>1.1.5</version>
        </dependency>
        <dependency>
            <groupId>com.winter</groupId>
            <artifactId>winter-file-storage</artifactId>
            <version>1.1.5</version>
        </dependency>

<!--        <dependency>-->
<!--            <groupId>net.sf.proguard</groupId>-->
<!--            <artifactId>proguard-base</artifactId>-->
<!--        </dependency>-->

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.5.15</version>
                <configuration>
                    <fork>true</fork> <!-- 如果没有该配置，devtools不会生效 -->
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <warName>${project.artifactId}</warName>
                </configuration>
           </plugin>
            <!--  代码混淆proguard maven插件  -->
<!--            <plugin>-->
<!--                <groupId>com.github.wvengen</groupId>-->
<!--                <artifactId>proguard-maven-plugin</artifactId>-->
<!--                <version>2.2.0</version>-->
<!--                <executions>-->
<!--                    &lt;!&ndash;   package时执行proguard   &ndash;&gt;-->
<!--                    <execution>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>proguard</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash;  输入的jar包  &ndash;&gt;-->
<!--                    <injar>${project.build.finalName}.jar</injar>-->
<!--                    &lt;!&ndash;  输出的jar包  &ndash;&gt;-->
<!--                    <outjar>${project.build.finalName}.jar</outjar>-->
<!--                    &lt;!&ndash;  是否进行混淆，默认为true  &ndash;&gt;-->
<!--                    <obfuscate>true</obfuscate>-->
<!--                    &lt;!&ndash;  配置文件,通常为proguard.cfg,主要对options选项进行配置,所有的options选项都可以进行配置  &ndash;&gt;-->
<!--                    <proguardInclude>${project.basedir}/proguard.cfg</proguardInclude>-->
<!--                    &lt;!&ndash;  额外的jar,项目编译所需的jar  &ndash;&gt;-->
<!--                    <libs>-->
<!--                        <lib>${java.home}/lib/rt.jar</lib>-->
<!--                        &lt;!&ndash;<lib>${java.home}/lib/jce.jar</lib>&ndash;&gt;-->
<!--                        <lib>${java.home}/lib/jsse.jar</lib>-->
<!--                    </libs>-->
<!--                    &lt;!&ndash;  对输入jar进行过滤，如对META-INFO文件不处理  &ndash;&gt;-->
<!--                    <inLibsFilter>!META-INF/**,!META-INF/versions/**</inLibsFilter>-->
<!--                    &lt;!&ndash;  输出路径配置,必须包含injar标签中填写的jar  &ndash;&gt;-->
<!--                    <outputDirectory>${project.build.directory}</outputDirectory>-->
<!--                    &lt;!&ndash;  上面使用了conf配置文件，options无需配置  &ndash;&gt;-->
<!--                    &lt;!&ndash;<options></options>&ndash;&gt;-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
        <finalName>${project.artifactId}</finalName>
    </build>

</project>
